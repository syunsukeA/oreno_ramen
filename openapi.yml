openapi: 3.0.0
info:
  description:
    "This is a sample server of oreno_ramen.  You can find out more
    about     Swagger at [http://swagger.io](http://swagger.io) or on
    [irc.freenode.net, #swagger](http://swagger.io/irc/)."
  version: 1.0.0
  title: Swagger oreno_ramen dev
  contact: {}
servers:
  - url: http://localhost:8080
  - url: http://54.64.130.71:8080
tags:
  - name: test
    description: Testing API
  - name: sign
    description: Everything about Sign
  - name: profile
    description: Everything about User
    externalDocs:
      description: Find out more
      url: http://example.com
  - name: search
    description: Everything about Search
    externalDocs:
      description: Find out more
      url: http://example.com
  - name: review
    description: Everything about Review
    externalDocs:
      description: Find out more
      url: http://example.com
  - name: home
    description: Everything about Home
    externalDocs:
      description: Find out more
      url: http://example.com
  - name: image
    description: Everything about Imege
    externalDocs:
      description: Find out more
      url: http://example.com
paths:
  /signup:
    post:
      tags:
        - sign
      summary: (Done) Endpoint for signup
      description: ""
      # operationId: getHealth
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: Koshikawa
                  description: The username of the account
                password:
                  type: string
                  example: hogehoge
                  description: Password of user
                profile_img:
                  type: string
                  format: binary
                  description: Profile image
            required: true
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: Koshikawa
                  description: The username of the account
                password:
                  type: string
                  example: hogehoge
                  description: Password of user
                profile_img:
                  type: string
                  format: binary
                  description: Profile image
        required: true
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: string
                example: OK
  "/profile":
    get:
      security:
        - Auth: []
      tags:
        - profile
      summary: (not implemented yet) Getting user profile
      description: ""
      # operationId: addAcount
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Account" # ToDo: 返すべきrefを定義
    post:
      security:
        - Auth: []
      tags:
        - profile
      summary: (not implemented yet) Setting user profile
      description: ""
      # operationId: addAcount
      requestBody:
        content:
          application/json:
            schema:
              type: object
              # ToDo: パラメータの検討&追加
              properties: 
                username:
                  type: string
                  example: Koshikawa
                  description: The username of the account
                password:
                  type: string
                  example: hogehoge
                  description: Password of user
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Account" # ToDo: 返すべきrefを定義
  "/search/visited":
    get:
      security:
        - Auth: []
      tags:
        - search
      summary: (Done) Searchig store already visited
      description: ""
      # operationId: updateAccount
      parameters:
        - name: username
          in: path
          description: The username using servises
          required: true
          example: syunsuke
          schema:
            type: string
        - name: lat
          in: query
          description: latitude
          required: true
          type: string
          example: "35.6408"
        - name: lng
          in: query
          description: longitude
          required: true
          type: string
          example: "139.7499"
        - name: rng
          in: query
          description: search range of area
          required: true
          type: string
          example: 4
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/HpShop"
  "/search/unvisited":
    get:
      security:
        - Auth: []
      tags:
        - search
      summary: (Done) Searchig store still unvisited
      description: ""
      # operationId: updateAccount
      parameters:
        - name: username
          in: path
          description: The username using servises
          required: true
          example: syunsuke
          schema:
            type: string
        - name: lat
          in: query
          description: latitude
          required: true
          type: string
          example: "35.6408"
        - name: lng
          in: query
          description: longitude
          required: true
          type: string
          example: "139.7499"
        - name: rng
          in: query
          description: search range of area
          required: true
          type: string
          example: 4
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/HpShop"
  "/review":
    post:
      security:
        - Auth: []
      tags:
        - review
      summary: (Done) Create an review
      description: ""
      # operationId: findRelationships
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                shop_id:
                  type: string
                  example: "J000010296"
                  description: The Hotpepper ShopID
                dishname:
                  type: string
                  example: 醤油ラーメン
                  description: The name of the dish write about in the review
                content:
                  type: string
                  example: 太麺で美味しい！
                  description: Comments of the review
                evaluate:
                  type: integer
                  example: 4
                  description: evaluate in review (1 to 5)
                bookmark:
                  type: integer
                  example: 1
                  description: bookmark(1) or not bookmark(0)
                review_img:
                  type: string
                  format: binary
                  description: Photo attaced review
            required: true
          application/json:
            schema:
              type: object
              properties:
                shop_id:
                  type: string
                  example: "J000010296"
                  description: The Hotpepper ShopID
                dishname:
                  type: string
                  example: 醤油ラーメン
                  description: The name of the dish write about in the review
                content:
                  type: string
                  example: 太麺で美味しい！
                  description: Comments of the review
                evaluate:
                  type: integer
                  example: 4
                  description: evaluate in review (1 to 5)
                review_img:
                  type: string
                  example: "0"
                  description: Photo attaced review (fix after)
        required: true
      responses:
        "204":
          description: No Content
  "/review/{review_id}":
    get:
      security:
        - Auth: []
      tags:
        - review
      summary: (Unnecessary EndPoint) Getting a review (The URL should be /{shop_id}/ 'review' /{review_id} ??)
      description: ""
      # operationId: findRelationships
      parameters:
        - name: review_id
          in: query
          description: Review id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Review"
    post: # get以外はクエリパラメータで渡さないほうがいい...？
      security:
        - Auth: []
      tags:
        - review
      summary: (Done) updating a review
      description: ""
      # operationId: findRelationships
      parameters:
        - name: review_id
          in: path
          description: Review id
          required: true
          example: "2"
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                shop_id:
                  type: string
                  example: "J000010296"
                  description: The Hotpepper ShopID
                dishname:
                  type: string
                  example: 醤油ラーメン
                  description: The name of the dish write about in the review
                content:
                  type: string
                  example: 太麺で美味しい！
                  description: Comments of the review
                evaluate:
                  type: integer
                  example: 4
                  description: evaluate in review (1 to 5)
                bookmark:
                  type: integer
                  example: 1
                  description: bookmark(1) or not bookmark(0)
                review_img:
                  type: string
                  format: binary
                  description: Photo attaced review
            required: true
          application/json:
            schema:
              $ref: "#/components/schemas/Review"
      responses:
        "200":
          description: OK
    delete: # get以外はクエリパラメータで渡さないほうがいい...？
      security:
        - Auth: []
      tags:
        - review
      summary: (Doone) Deleting a review
      description: ""
      # operationId: findRelationships
      parameters:
        - name: review_id
          in: path
          description: Review id
          required: true
          example: "2"
          schema:
            type: string
      responses:
        "200":
          description: OK
  "/home/review":
    get:
      security:
        - Auth: []
      tags:
        - home
      summary: (not implemented yet) Getting reviews (under the user? should named as reviews? need discussion)
      description: ""
      parameters:
        - name: offset
          in: query
          description: offset
          example: "3"
          required: true
          schema:
            type: string
      # operationId: findRelationships
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Relationship" # ToDo: 返すべきrefを定義
  "/home/review/bookmark":
    get:
      security:
        - Auth: []
      tags:
        - home
      summary: (not implemented yet) Getting bookmark reviews (need discussion)
      description: ""
      parameters:
        - name: offset
          in: query
          description: offset
          example: "3"
          required: true
          schema:
            type: string
      # operationId: findRelationships
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Relationship" # ToDo: 返すべきrefを定義
  "/home/review/evaluate":
    get:
      security:
        - Auth: []
      tags:
        - home
      summary: (not implemented yet) Getting reviews filtered by Evaluate (need discussion)
      description: ""
      parameters:
        - name: lower
          in: query
          description: lower
          example: "1"
          required: true
          schema:
            type: string
        - name: upper
          in: query
          description: upper
          example: "3"
          required: true
          schema:
            type: string
      # operationId: findRelationships
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Relationship" # ToDo: 返すべきrefを定義
  "/home/review/period":
    get:
      security:
        - Auth: []
      tags:
        - home
      summary: (not implemented yet) Getting reviews filtered by period (need discussion)
      description: ""
      parameters:
        - name: lower
          in: query
          description: lower
          example: "2023-08-20"
          required: true
          schema:
            type: string
        - name: upper
          in: query
          description: upper
          example: "2023-08-23"
          required: true
          schema:
            type: string
      # operationId: findRelationships
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Relationship" # ToDo: 返すべきrefを定義
  "/home/shop":
    get:
      security:
        - Auth: []
      tags:
        - home
      summary: (not implemented yet) Getting shops (need discussion)
      description: ""
      parameters:
        - name: offset
          in: query
          description: offset
          example: "3"
          required: true
          schema:
            type: string
      # operationId: findRelationships
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Relationship" # ToDo: 返すべきrefを定義
  "/home/shop/bookmark":
    get:
      security:
        - Auth: []
      tags:
        - home
      summary: (not implemented yet) Getting bookmark shops (need discussion)
      description: ""
      parameters:
        - name: offset
          in: query
          description: offset
          example: "3"
          required: true
          schema:
            type: string
      # operationId: findRelationships
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Relationship" # ToDo: 返すべきrefを定義
  "/img/{filename}":
    get:
      tags:
        - image
      summary: Getting image Endpoint
      description: ""
      parameters:
        - name: filename
          in: path
          description: filename
          example: "1692697109185247797.jpg"
          required: true
          schema:
            type: string
      # operationId: findRelationships
      responses:
        "200":
          description: OK
          content:
            image/jpeg:
              schema:
                type: string
                format: binary
externalDocs:
  description: Find out more about Swagger
  url: http://example.com
components:
  securitySchemes:
    Auth:
      type: apiKey
      name: Authorization
      in: header
  schemas:
    Review:
      type: object
      properties:
        review_id:
          type: integer
          description: Review ID
          example: 2
        user_id:
          type: integer
          description: User ID
          example: 2
        shop_id:
          type: string
          description: HottoPepper's Shop ID
          example: J000010296
        shopname:
          type: string
          description: The shopname
          example: 歩夢家
        content:
          type: string
          description: The content of review
          example: 今まで食べた中で一番の太麺。
        evaluate:
          type: integer
          description: evaluate in review (1 to 5)
          example: 4
        review_img:
          type: string
          description: URL to the review image
          example: ""
        bookmark:
          type: integer
          description: The boolean that this review bookmarked by user (true 1, false, 0)
          example: 1
        created_at:
          type: string
          format: date-time
          description: The time the review was created
        updated_at:
          type: string
          format: date-time
          description: The time the review was updated
    Account:
      type: object
      properties:
        id:
          type: integer
          description: Account ID
          example: 0
        username:
          type: string
          description: The username of the account
          example: john
        display_name:
          type: string
          description: The account's display name
          example: ジョン
        create_at:
          type: string
          format: date-time
          description: The time the account was created
        followers_count:
          type: integer
          description: The number of followers for the account
          example: 52
        following_count:
          type: integer
          description: The number of accounts the given account is following
          example: 128
        note:
          type: string
          description: Biography of user
        avatar:
          type: string
          description: URL to the avatar image
        header:
          type: string
          description: URL to the header image
    Relationship:
      type: object
      properties:
        id:
          type: integer
          description: Target account id
        following:
          type: boolean
          description: Whether the user is currently following the account
        followed_by:
          type: boolean
          description: Whether the user is currently being followed by the account
    Media:
      type: object
      properties:
        media_id:
          type: integer
          description: an identifier related uploaded image
          example: 123
        media_url:
          type: string
          description: URL of uploaded image
          example: "https://dummyimage.com/600x800"
    AttachmentRequest:
      type: object
      properties:
        media_id:
          type: integer
          description: an identifier related uploaded file
          example: 123
        description:
          description: uploaded file description
          type: string
          example: "hoge hoge"
    Attachment:
      type: object
      properties:
        id:
          type: integer
          description: ID of the attachment
          example: 123
        type:
          type: string
          description: 'One of: "image", "video", "gifv", "unknown"'
          example: "image"
        url:
          type: string
          description: URL of the image
        description:
          type: string
          description: A description of the image for the visually impaired (maximum 420 characters), or `null` if none provided
    Status:
      type: object
      properties:
        id:
          type: integer
          description: The ID of the status
          example: 123
        account:
          $ref: "#/components/schemas/Account"
        content:
          type: string
          description: Body of the status; this will contain HTML (remote HTML already sanitized)
          example: ピタ ゴラ スイッチ♪
        create_at:
          type: string
          format: date-time
          description: The time the status was created
        media_attachments:
          type: array
          items:
            $ref: "#/components/schemas/Attachment"
    HpShop:
      type: object
      properties:
        access:
          type: string
          description: How long to get there
        address:
          type: string
          description: The shop place
        close:
          type: string
          description: The infomation of regular holiday
        id:
          type: string
          description: The Primary ShopID in HotPepper DB
        lat:
          type: float
          description: latitude
        lng:
          type: float
          description: longitude
        midnight:
          type: string
          description: The information that open late at night
        mobile_access:
          type: string
          description: Same as access???
        name:
          type: string
          description: The name of shop
        open:
          type: string
          description: The time when shop is open
        photo:
          type: object
          $ref: "#/components/schemas/HardwareType"
          description: An information of photos
    HardwareType:
      type: object
      properties:
        mobile:
          type: object
          $ref: "#/components/schemas/PhotoType"
          description: The information for mobile
        pc:
          type: object
          $ref: "#/components/schemas/PhotoType"
          description: The information for pc
    PhotoType:
      type: object
      properties:
        l:
          type: string
          description: The URL to large size photo
        m:
          type: string
          description: The URL to middle size photo
        s:
          type: string
          description: The URL to small size photo